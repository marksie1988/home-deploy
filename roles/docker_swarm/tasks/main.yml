---
- name: Check if Swarm is already initialized
  command: docker info --format "{{ '{{' }}.Swarm.LocalNodeState{{ '}}' }}"
  register: swarm_status
  changed_when: false

- name: Initialize Docker Swarm
  command: docker swarm init --advertise-addr "{{ swarm_cluster_ip }}"
  register: swarm_init
  changed_when: "'Swarm initialized' in swarm_init.stdout and swarm_status.stdout == 'inactive'"
  when: inventory_hostname == groups['swarm'][0]

- name: Get Swarm Manager Token
  command: docker swarm join-token manager -q
  register: manager_token
  changed_when: false
  when: inventory_hostname == groups['swarm'][0]
  run_once: true

- name: Set Swarm Manager Token as Fact
  set_fact:
    swarm_manager_token: "{{ manager_token.stdout }}"
  when: manager_token is defined

- name: Get Swarm Worker Token
  command: docker swarm join-token worker -q
  register: worker_token
  changed_when: false
  when: inventory_hostname == groups['swarm'][0]
  run_once: true

- name: Set Swarm Worker Token as Fact
  set_fact:
    swarm_worker_token: "{{ worker_token.stdout }}"
  when: worker_token is defined

- name: Add Swarm Managers
  command: docker swarm join --token "{{ swarm_manager_token }}" "{{ hostvars[groups['swarm'][0]].ansible_default_ipv4.address }}"
  when: inventory_hostname != groups['swarm'][0] and inventory_hostname in groups['swarm'][:number_of_managers] and swarm_status.stdout != "active"
  changed_when: false

- name: Add Swarm Workers
  command: docker swarm join --token "{{ swarm_worker_token }}" "{{ hostvars[groups['swarm'][0]].ansible_default_ipv4.address }}"
  when: inventory_hostname not in groups['swarm'][:number_of_managers] and swarm_init.changed and swarm_status.stdout != "active"
  changed_when: false
